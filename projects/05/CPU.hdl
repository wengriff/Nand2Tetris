// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Not(in=instruction[15], out=instructionA);
        Not(in=instructionA, out=instructionC);

        And(a=instruction[5], b=instructionC, out=ALUintoA);
        Mux16(a=instruction, b=outALUintoA, sel=ALUintoA, out=outMux16Instruction);

        Or(a=instructionA, b=ALUintoA, out=loadA);
        Register(in=outMux16Instruction, load=loadA, out=outRegisterA, out[0..14]=addressM);
        Mux16(a=outRegisterA, b=inM, sel=instruction[12], out=outMux16inM);

        And(a=instructionC, b=instruction[4], out=loadD);
        Register(in=outALUintoD, load=loadD, out=outRegisterD);

        ALU(x=outRegisterD, y=outMux16inM, zx=instruction[11],nx=instruction[10],
            zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],
            out=outALUintoD, out=outALUintoA,out=outM, zr=zero, ng=negative);
        And(a=instructionC, b=instruction[3], out=writeM);

        And(a=negative, b=instruction[2], out=jlt);
        And(a=zero, b=instruction[1], out=jeq);
        Or(a=zero, b=negative, out=zeroOrNegative);
        Not(in=zeroOrNegative, out=positive);
        And(a=positive, b=instruction[0], out=jgt);
        Or(a=jeq, b=jlt, out=jle);
        Or(a=jgt, b=jle, out=jump);
        And(a=instructionC, b=jump,out=loadPC);
        Not(in=loadPC, out=incPC);
        PC(in=outRegisterA, load=loadPC, inc=incPC, reset=reset, out=outPC, out[0..14]=pc);
}